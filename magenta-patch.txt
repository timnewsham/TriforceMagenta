diff --git a/kernel/arch/arm64/arch.cpp b/kernel/arch/arm64/arch.cpp
index 95ad96e..85cfd9c 100644
--- a/kernel/arch/arm64/arch.cpp
+++ b/kernel/arch/arm64/arch.cpp
@@ -210,7 +210,9 @@ static void arm64_cpu_early_init(void)
     ARM64_WRITE_SYSREG(pmcntenset_el0, (1UL << 31));
 
     /* enable user space access to cycle counter */
+#ifdef THIS_BREAKS_TRIFORCE_QEMU
     ARM64_WRITE_SYSREG(pmuserenr_el0, 1UL);
+#endif
 
     /* enable user space access to virtual counter (CNTVCT_EL0) */
     ARM64_WRITE_SYSREG(cntkctl_el1, 1UL << 1);
diff --git a/kernel/lib/syscalls/syscalls.cpp b/kernel/lib/syscalls/syscalls.cpp
index 3e9c778..265c6a3 100644
--- a/kernel/lib/syscalls/syscalls.cpp
+++ b/kernel/lib/syscalls/syscalls.cpp
@@ -35,6 +35,7 @@ inline uint64_t invoke_syscall(
     uint64_t arg5, uint64_t arg6, uint64_t arg7, uint64_t arg8) {
     uint64_t ret;
 
+#ifdef nope
     const uintptr_t vdso_code_address =
         ProcessDispatcher::GetCurrent()->vdso_code_address();
     const uint64_t pc_offset = pc - vdso_code_address;
@@ -44,6 +45,9 @@ inline uint64_t invoke_syscall(
         if (unlikely(!VDso::ValidSyscallPC::name(pc_offset)))           \
             return sys_invalid_syscall(syscall_num, pc, vdso_code_address); \
     } while (0)
+#else
+#define CHECK_SYSCALL_PC(name) 
+#endif
 
     switch (syscall_num) {
 #include <magenta/syscall-invocation-cases.inc>
@@ -121,7 +125,7 @@ inline x86_64_syscall_result do_syscall(uint64_t syscall_num, uint64_t ip,
         ProcessDispatcher::GetCurrent()->vdso_code_address();
 
     uint64_t ret;
-    if (unlikely(!valid_pc(ip - vdso_code_address))) {
+    if (0 && unlikely(!valid_pc(ip - vdso_code_address))) {
         ret = sys_invalid_syscall(syscall_num, ip, vdso_code_address);
     } else {
         ret = make_call();
@@ -143,7 +147,9 @@ x86_64_syscall_result unknown_syscall(uint64_t syscall_num, uint64_t ip) {
     return do_syscall(syscall_num, ip,
                       [](uintptr_t) { return false; },
                       [&]() {
+#ifdef FUZZER_PATCH_MADE_THIS_REACHABLE
                           __builtin_unreachable();
+#endif
                           return MX_ERR_INTERNAL;
                       });
 }
diff --git a/system/core/devmgr/devmgr.c b/system/core/devmgr/devmgr.c
index 4fd42e0..5299b5a 100644
--- a/system/core/devmgr/devmgr.c
+++ b/system/core/devmgr/devmgr.c
@@ -60,6 +60,7 @@ mx_handle_t get_sysinfo_job_root(void) {
 }
 
 static const char* argv_sh[] = { "/boot/bin/sh" };
+static const char* argv_fuzzer[] = { "/boot/bin/fuzz", "watch", "-vv" };
 static const char* argv_autorun0[] = { "/boot/bin/sh", "/boot/autorun" };
 static const char* argv_appmgr[] = { "/system/bin/appmgr" };
 
@@ -191,8 +192,13 @@ static int console_starter(void* arg) {
     for (unsigned n = 0; n < 30; n++) {
         int fd;
         if ((fd = open("/dev/misc/console", O_RDWR)) >= 0) {
-            devmgr_launch(svcs_job_handle, "sh:console",
-                          countof(argv_sh), argv_sh, envp, fd, NULL, NULL, 0);
+            if(getenv("fuzz"))
+                devmgr_launch(svcs_job_handle, "fuzz:console",
+                            countof(argv_fuzzer), argv_fuzzer, envp, fd, NULL, NULL, 0);
+            else {
+                devmgr_launch(svcs_job_handle, "sh:console",
+                            countof(argv_sh), argv_sh, envp, fd, NULL, NULL, 0);
+            }
             break;
         }
         mx_nanosleep(mx_deadline_after(MX_MSEC(100)));
